# !/usr/bin/python3
# -*- coding: utf-8 -*

import datetime
import time
import logging
import re
import ssl
import sys
import telegram
from telegram import Update
from telegram.ext import Filters, CallbackQueryHandler, CallbackContext
from telegram.ext import Updater, CommandHandler, MessageHandler

import os
from os import path

import config

# file with classes imports
from local_helpers import Helpers
from local_user import User
from local_bg import BG
from local_db import DB, DBPsql

# bg_config = copy.deepcopy(config.bg_config)
db_config = config.db_config
TOKEN = config.TOKEN
updater = Updater(token=TOKEN, use_context=True)
# , request_kwargs={'proxy_url': 'socks5://51.15.83.215:1080'}, workers=0) #proxy
dispatcher = updater.dispatcher


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
def start(update: Update, context: CallbackContext):
    job = context.job
    # —É–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
    command = "/start"
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id

    Helpers.logger(user_id, command)

    user = User('users', user_id, chat_id, command)
    # refresh field report
    # user.users_property('report', 'insert', ' ')
    # user.set_last_msg()
    user.users_property('last_msg', 'insert')
    text, reply_markup = user.menu()

    context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')


# —Ñ-–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def echo(update: Update, context: CallbackContext):
    # print(update.message)
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    msg = Helpers.emoji_remove(update.message.text)

    Helpers.logger(user_id, msg)

    user = User('users', user_id, chat_id, msg)
    # refresh field report
    # user.users_property('report', 'insert', ' ')
    user.prev_msg = user.users_property('last_msg')
    user.users_property('last_msg', 'insert')
    # print(user.user_state())

    # print(user.msg)
    if user.msg == '–¢–µ—Å—Ç –∫–∞–±–µ–ª—è' and user_id in user.user_crm_info:
        text = '<code>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. \n–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–±–µ–ª—è...</code>'
        context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')

    text, reply_markup = user.menu()

    if not user.users_property('report') or user.users_property('report').find("unplug_") == -1:
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    # print(user.prev_msg)
    crm_number = user.users_property('crm_number')
    if user.crm_number and ((user.msg not in config.exclude_crm_action and user.msg in config.menu_items)
                            or user.prev_msg in config.ch_host_list.keys()) \
            and user.user_crm_info[user_id]['clean_data'] != '':
        # print(user.user_crm_info[user_id]['clean_data']['description'])
        abon_phones = Helpers.get_abon_phones(user.user_crm_info[user_id]['clean_data'])
        Helpers.crm_main_actions(context.bot, chat_id, crm_number, abon_phones)

        if 'type' in user.user_crm_info[user_id]['clean_data'] \
                and user.user_crm_info[user_id]['clean_data']['type'] in config.custom_processing_type\
                and user.user_crm_info[user_id]['clean_data']['subject'] == 'test'\
                and (Helpers.is_int(user.msg) and user.prev_msg in config.ch_host_list.keys()):
            func_name = config.custom_processing_type[user.user_crm_info[user_id]['clean_data']['type']]
            getattr(Helpers, func_name)(context.bot, chat_id, reply_markup, crm_number)

    if user.msg == '–ê–∫—Ç–∏–≤–∞—Ü–∏—è' and user_id in user.user_crm_info:
        Helpers.yes_no_menu(context.bot, chat_id, '<code>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä</code>')

    elif re.search(r'add_work_(\d)*_(\d)', user.prev_msg) and Helpers.is_int(user.msg):
        work_id = user.prev_msg.split('_')[2]
        crm_num = user.prev_msg.split('_')[3]
        count = user.msg
        res = BG.add_work(crm_num, work_id, count, [str(user.users_property('bg_id'))], user.users_property('bg_id'),
                          user_id)
        if res['code'] == 0:
            text = '<code>–†–∞–±–æ—Ç–∞ –ø–æ –∑–∞–¥–∞—á–µ %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</code>' % crm_num
        else:
            err_msg = ''
            if 'message' in res:
                err_msg = ':\n' + res['message']
            text = '–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ %s <code>%s</code>!\n<code>–ö–æ–¥ –æ—à–∏–±–∫–∏=%s. \n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' \
                   '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</code>' % (crm_num, err_msg, str(res['code']))
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif re.search(r'add_work_(\d)*_(\d)', user.prev_msg) and not Helpers.is_int(user.msg):
        text = '<code>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∫–æ–ª-–≤–∞ —Ä–∞–±–æ—Ç!</code>'
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif re.search(r'func_processing_add_comment', user.prev_msg):
        crm_number = user.users_property('crm_number')
        to_history = user.msg
        res = BG.crm_add_comment(crm_number, to_history, user.users_property('name'), user_id)
        if res['code'] == 0:
            if user_id not in user.user_crm_info.keys():
                user.user_crm_info.update({'crm_number': crm_number})
            text = '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!\n'
            data = {'username': user.users_property('name'), 'responsible': config.tech_department_supervisor, 'user': user}
            text = text + Helpers.func_unplug_processing_finish(crm_number, data)
            user.user_crm_info[user_id] = BG.crm_info(crm_number, user_id)
        else:
            text = '<b>–û—à–±–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è!</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif re.search(r'save_badge_number#(\d+)', user.prev_msg):
        contract_id = user.user_crm_info[user_id]['clean_data']['contract']['id']
        badge_number = user.msg
        text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä <b>%s</b> –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–æ–º–µ—Ä–∞ –±–∏—Ä–∫–∏ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ <b>%s</b>?' % \
               (badge_number, contract_id)
        Helpers.yes_no_menu(context.bot, chat_id, text)
        # context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')


# —Ñ-–∏—è, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫
def callback_button(update: Update, context: CallbackContext):
    # print(update.callback_query)
    # –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –Ω–∞–∂–∞—Ç–∏—é inline-–∫–Ω–æ–ø–∫–∏
    call = update.callback_query
    user_id = call.from_user.id
    chat_id = call.message.chat.id

    Helpers.logger(user_id, call.data)

    user = User('users', user_id, chat_id, call.data)
    # refresh field report
    # user.users_property('report', 'insert', ' ')
    user.prev_msg = user.users_property('last_msg')

    user.users_property('last_msg', 'insert')

    # text, reply_markup = user.menu()
    # text = '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'
    # context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    text, reply_markup = user.menu()

    if user.prev_msg == '–ß–µ–∫-–ø–æ–∏–Ω—Ç—ã' and user.msg not in config.menu_items:
        crm_number = user.users_property('crm_number')
        user_name = user.users_property('name')
        res = BG.crm_set_checkpoint(crm_number, user.msg, user_name, user_id)
        # print(res)
        if res['code'] == 0:
            text = '<code>–ß–µ–∫-–ø–æ–∏–Ω—Ç [' + user.msg + '] –ø–æ –∑–∞–¥–∞—á–µ ' + str(crm_number) + ' –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω!</code>'
        else:
            text = '–û—à–∏–±–∫–∞: ' + res['message']
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif re.search(r'add_work_(\d)*_(\d)', user.msg):
        text = '<code>–î–ª—è –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–¥–∞—á–µ</code> <b>%s</b> <code>–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç (' \
               '—á–∏—Å–ª–æ).</code>' % (user.msg.split('_')[3])
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif re.search(r'multi_phones_(\d)*', user.msg):
        phones_list = user.msg.replace('multi_phones_', '').split(';')
        # print(phones_list)
        txt = '<code>–£ –∞–±–æ–Ω–µ–Ω—Ç–∞ –±–æ–ª–µ–µ 1 –Ω–æ–º–µ—Ä–∞!</code> \n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–æ–º–µ—Ä–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã–∑–æ–≤:'
        call_data = {}
        num = 0
        for phone in phones_list:
            num = num + 1
            data_key = 'üìû –ù–æ–º–µ—Ä_' + str(num)  # button text
            call_data[data_key] = 'infinity_call_' + phone
        # print(call_data)
        text, reply_markup = Helpers.gen_inline_kb(call_data, txt)
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif re.search(r'infinity_call_(\d)*', user.msg):
        text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –∞–±–æ–Ω–µ–Ω—Ç—É?'
        Helpers.yes_no_menu(context.bot, chat_id, text)

    elif re.search(r'infinity_call_(\d)*', user.prev_msg) and user.msg == '–î–∞':
        abon_number = re.search(r'\d+', user.prev_msg)[0]
        text = user.infinity_call(abon_number)
        context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')

    elif re.search(r'to_history_crm(\d)*', user.msg):
        # –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ inline callback
        crm_number = re.search(r'\d+', user.msg).group(0)
        text = '–í—ã —Ç–æ—á–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á–∏ <b>%s</b>?' % crm_number
        Helpers.yes_no_menu(context.bot, chat_id, text)

    elif re.search(r'to_history_crm(\d)*', user.prev_msg) and user.msg == '–î–∞':
        crm_number = re.search(r'\d+', user.prev_msg).group(0)

        text = '<code>–ü–æ–¥–æ–∂–¥–∏—Ç–µ. –î–æ–±–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...</code>'
        context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
        res_cable_test = BG.get_cable_test(crm_number, user_id)
        if res_cable_test['code'] == 0:
            to_history = res_cable_test['data']['cable']['log']
            res = BG.crm_add_comment(crm_number, to_history, user.users_property('name'), user_id)
            if res['code'] == 0:
                text = '<code>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞–¥–∞—á–µ %s!</code>' % crm_number
                user.user_crm_info[user_id] = BG.crm_info(crm_number, user_id)
                user.user_crm_info[user_id]['crm_number'] = crm_number
            else:
                text = '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ %s!\n<code>–ö–æ–¥ –æ—à–∏–±–∫–∏=%s. \n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ ' \
                       '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</code>' % (crm_number, str(res['code']))
        else:
            text = '<code>–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–±–µ–ª—è! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á–∏ %s!</code>' % crm_number
        context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')

    elif re.search(r'crm_(\d)*_task_delegate', user.prev_msg) and user.msg not in ['–î–∞', '–ù–µ—Ç']:
        group_list = BG.get_group_list(user_id)
        if user.msg in group_list:
            text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É ' + \
                   '<b>' + user.users_property('crm_number') + '</b> ' \
                                                               '–Ω–∞ –≥—Ä—É–ø–ø—É ' + '<b>' + user.msg + '</b> '
        else:
            text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º ' + '<b>' + user.msg + '</b>' \
                                                                                   ' –ø–æ –∑–∞–¥–∞—á–µ ' + '<b>' + user.users_property(
                'crm_number') + '</b> '
        Helpers.yes_no_menu(context.bot, chat_id, text)

    # elif re.search(r'crm_(\d)*_report_photo_(\d)', user.msg):
    #     text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞—á–µ ' + '<b>' + user.users_property('crm_number') + '</b> '
    #     Helpers.yes_no_menu(context.bot, chat_id, text)

    elif re.search(r'crm_(\d)*_report_photo_(\d)', user.msg):  # and user.msg == '–î–∞'
        crm_type = user.msg.split('_')[5]
        photo_name = str(config.report_points[crm_type]['send_photo'][int(user.msg.split('_')[4])])
        text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ñ–æ—Ç–æ:\n\"" + photo_name + "\""
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif re.search(r'crm_(\d)*_task_done', user.msg):
        text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" –¥–ª—è –∑–∞–¥–∞—á–∏ ' + \
               '<b>' + user.users_property('crm_number') + '</b>'
        Helpers.yes_no_menu(context.bot, chat_id, text)

    elif user.prev_msg == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å' and user.msg:
        if re.search(r'crm_(\d)*_task_(open|done|close|suspend)', user.msg):
            status = '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!'
            if re.search(r'open', user.msg):
                status = '–æ—Ç–∫—Ä—ã—Ç–∞'
            elif re.search(r'done', user.msg):
                status = '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
            elif re.search(r'close', user.msg):
                status = '–∑–∞–∫—Ä—ã—Ç–∞'
            elif re.search(r'suspend', user.msg):
                status = '–æ—Ç–ª–æ–∂–µ–Ω–∞'
            text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "' + status + '" –¥–ª—è –∑–∞–¥–∞—á–∏ ' + \
                   '<b>' + user.users_property('crm_number') + '</b>'
            Helpers.yes_no_menu(context.bot, chat_id, text)

    elif user.prev_msg == 'CRM' and user.msg in config.ch_host_list.keys():
        # bg_config['server'] = config.bg_config['server'].replace(config.default_host, config.ch_host_list[user.msg])
        # print(bg_config)
        user.bg_servername = config.ch_host_list[user.msg]
        user.users_property('bg_servername', 'insert', user.bg_servername)
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:'
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif user.msg == '–ù–µ—Ç':
        text = '<code>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ!</code>'
        if user.users_property('report') == 'unplug_badge':
            user.users_property('report', 'insert', ' ')
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif re.search(r'send_photo|send_document', user.prev_msg) and user.msg == '–î–∞':
        msg_type = user.prev_msg
        db = DB(db_config)
        query = """SELECT teleg_file_id from reports WHERE user_id=%d""" % user.user_id
        file_id = db.sql_execute(query)[0]

        query = """SELECT filesize from reports WHERE user_id=%d""" % user.user_id
        filesize = db.sql_execute(query)[0]

        file = context.bot.getFile(file_id)

        # if user.msg == 'send_photo' and user.prev_msg == '–î–∞':
        if filesize > 20971520:
            text = '<code>–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–æ–ª–µ–µ 20–ú–±. \n–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –Ω–µ –±–æ–ª–µ–µ 20–ú–±.</code>'
            context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
        else:
            (dirName, file_name) = os.path.split(file.file_path)
            file_name = str(datetime.datetime.now().strftime("%Y%m%d%H%M%S")) + '_' + file_name
            servername = user.users_property('bg_servername')
            crm_number = user.users_property('crm_number')
            folder_path = config.bot_folder + 'reports/' + config.report_provider_folders[servername] + '/' + \
                          str(crm_number) + '/'
            if not path.exists(folder_path):
                try:
                    os.mkdir(folder_path)
                except OSError:
                    Helpers.logger(user.user_id, "Creation of the directory %s failed" % folder_path)
            downloaded_file = file.download(folder_path + file_name)

            url = config.bot_url + config.report_provider_folders[servername] + '/' + str(crm_number) + '/' + file_name
            query = """SELECT description FROM reports WHERE user_id=%d""" % user.user_id
            description = db.sql_execute(query)[0]

            if crm_number:
                res = BG.post_url_to_task(crm_number, user_id, url, description)
                if res['code'] == 0:
                    key = next((k for k in config.processing_photo_list if config.processing_photo_list[k]['name'] == description), None)
                    if key is None:
                        context.bot.send_message(chat_id=user.chat_id, text='<code>–î–û–ë–ê–í–õ–ï–ù–û</code>', parse_mode='HTML')
                    else:
                        txt = '<code>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</code>'
                        context.bot.send_message(chat_id=chat_id, text=txt, parse_mode='HTML')

                        if 'unplug_' not in user.users_property('report'):
                            Helpers.unplug_processing(context.bot, chat_id, reply_markup, crm_number)
                        if user.users_property('report') in ['unplug_not_connected', 'unplug_closed_object']:
                            data = {'username': user.name, 'responsible': config.tech_department_supervisor, 'user': user}
                            txt = Helpers.func_unplug_processing_finish(crm_number, data)
                            user.user_crm_info[user_id] = BG.crm_info(crm_number, user_id)
                            context.bot.send_message(chat_id=chat_id, text=txt, parse_mode='HTML')
                else:
                    text = '<b>–û—à–∏–±–∫–∞:</b> %s! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–Ω–æ–≤–æ.' % res['message']
                    context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
            else:
                text = '<code>–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "CRM".</code>'
                context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')
    elif re.search(r'processing_tree#(\d)*#(\d)', user.msg):
        proc_list = user.msg.split('#')  # 'debt_processing_tree#%s#1.1'
        processing_tree = proc_list[0]
        crm_number = proc_list[1]
        tree_queue = proc_list[2]
        call_data = Helpers.tree_handler(processing_tree, tree_queue, crm_number)
        if isinstance(call_data, str):
            # if re.search(r'func_', call_data) and re.search('#CRM#', call_data, re.IGNORECASE):
            #     call_data.replace('#CRM#', crm_number)
            #     user.users_property('last_msg', 'insert', call_data)

            if re.search(r'func_', call_data):
                data_list = call_data.split('#')
                func_name = data_list[0]
                additional_param = ''
                if len(data_list) > 1:
                    additional_param = data_list[1]
                # user.users_property('last_msg', 'insert', func_name)
                # print(func_name)
                # print(additional_param)
                text = getattr(Helpers, func_name)(processing_tree, tree_queue, additional_param)
                # print(tree_queue)
                if func_name == 'func_processing_debt_paid':
                    pay_method = re.search(r'–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:\s*<b>(.+)</b>', text, re.IGNORECASE)[1]
                    user.users_property('last_msg', 'insert', '%s#%s' % (func_name, pay_method))
                else:
                    user.users_property('last_msg', 'insert', call_data)
            else:
                text = '–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ!'

            context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            # print(call_data)
            menu_col_count = 1 if len(call_data) >= 3 else len(call_data)
            separator = '------------------'
            text, reply_keyboard = Helpers.gen_inline_kb(call_data, '<code>%s\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</code>' % separator,
                                                         menu_col_count)
            context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_keyboard, parse_mode='HTML')
    # elif re.search(r'debt_processing_tree#(\d)*#(\d)', user.prev_msg):
    #     pass
    elif re.search(r'save_badge_number#(\d+)', user.msg):
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏—Ä–∫–∏'
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

    elif user.msg == '–î–∞' and user.users_property('report') == 'unplug_badge':
        # print("from user.users_property('report') == 'unplug_badge'" + user.prev_msg)
        crm_num = user.users_property('crm_number')
        bg_id = user.users_property('bg_id')
        badge_number = user.msg
        try:
            contract_id = user.user_crm_info[user_id]['clean_data']['contract']['id']
        except Exception:
            contract_id = BG.crm_info(crm_num, user_id)['data']['contract']['id']

        text = Helpers.func_processing_save_badge_number(crm_num, user, bg_id, contract_id, badge_number)
        text = text + Helpers.func_processing_change_task_status(crm_num, user, user_id)  # status='–≤—ã–ø–æ–ª–Ω–µ–Ω–∞'
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')

        # TODO: do autorefresh crm history data after add comment
        user.user_crm_info[user_id] = BG.crm_info(crm_num, user_id)
    else:
        context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode='HTML')


def photo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    msg_type = 'send_photo'
    msg = msg_type  # + ' ' + str(update.message.photo[len(update.message.photo) - 1].file_id)

    # print(update.message.photo[len(update.message.photo) - 1])

    user = User('users', user_id, chat_id, msg)
    user.prev_msg = user.users_property('last_msg')
    user.users_property('last_msg', 'insert')

    Helpers.logger(user_id, msg)

    if re.search(r'crm_(\d)*_report_photo_(\d)', user.prev_msg):  # and user.msg == '–î–∞'
        # user.user_crm_info[user.user_id][]
        crm_type = user.prev_msg.split('_')[5]
        photo_name = str(config.report_points[crm_type]['send_photo'][int(user.prev_msg.split('_')[4])])
        db = DB(db_config)
        f_id = update.message.photo[len(update.message.photo) - 1].file_id
        f_size = update.message.photo[len(update.message.photo) - 1].file_size
        query = """REPLACE INTO reports (user_id, teleg_file_id, filesize, url, description) \
        VALUES (%d, '%s', %d, '%s', '%s')""" % (user_id, f_id, f_size, None, photo_name)
        db.sql_execute(query)

        text = '–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ <b>%s</b>?' % user.users_property('crm_number')
        Helpers.yes_no_menu(context.bot, chat_id, text)

    elif re.search(r'func_processing_add_photo#\w+', user.prev_msg):
        try:
            processing_type = re.search(r'func_processing_add_photo#(\w+)', user.prev_msg)[1]
        except Exception:
            processing_type = 'not found'
        photo_name = config.processing_photo_list[processing_type]['name']
        db = DB(db_config)
        f_id = update.message.photo[len(update.message.photo) - 1].file_id
        f_size = update.message.photo[len(update.message.photo) - 1].file_size
        query = """REPLACE INTO reports (user_id, teleg_file_id, filesize, url, description) \
                VALUES (%d, '%s', %d, '%s', '%s')""" % (user_id, f_id, f_size, None, photo_name)
        db.sql_execute(query)

        text = '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: <b>"%s"</b> –≤ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ <b>%s</b>?' % \
               (photo_name, user.users_property('crm_number'))
        Helpers.yes_no_menu(context.bot, chat_id, text)

        if processing_type in ['unplug_badge', 'unplug_not_connected', 'unplug_closed_object']:
            user.users_property('report', 'insert', processing_type)
        if processing_type == 'unplug_badge':
            text = '–ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ <b>"–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –±–∏—Ä–∫–∏"</b>:'
            call_data = {'–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –±–∏—Ä–∫–∏': 'save_badge_number#%s' % user.users_property('crm_number')}
            text, reply_keyboard = Helpers.gen_inline_kb(call_data, text)
            context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_keyboard, parse_mode='HTML')


def document(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    msg_type = 'send_document'
    msg = msg_type  # + ' ' + str(update.message.document.file_id)

    # print(update.message)

    user = User('users', user_id, chat_id, msg)
    user.prev_msg = user.users_property('last_msg')
    user.users_property('last_msg', 'insert')

    Helpers.logger(user_id, msg)

    text = '–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–µ ' + \
           '<b>' + user.users_property('crm_number') + '</b>?'
    Helpers.yes_no_menu(context.bot, chat_id, text)
